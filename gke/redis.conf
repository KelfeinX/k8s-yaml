#Clone the sample code:
git clone \
    https://github.com/kubernetes/examples

#Navigate to the directory containing the sample code:
cd examples/guestbook

#Set up gcloud and kubectl credentials
gcloud container clusters \
    get-credentials [cluster-name] \
    --zone [cluster-zone]

#Replace [cluster-name] and [cluster-zone] with the name and zone of the instance that you created.
#Exploring the controller

#View the configuration file for the controller:
cat redis-master-deployment.yaml

#This file contains configuration to deploy a Redis master. The spec field defines the pod specification that the replication controller uses to create the Redis pod. The image tag refers to a Docker image to be pulled from a registry.
#Deploy the master controller

#Deploy the Redis master:
kubectl create -f \
    redis-master-deployment.yaml
#View the running pod

#Verify that the Redis master pod is running:
 kubectl get pods

#Create the redis-master service

#In this section, you'll create a service to proxy the traffic to the Redis master pod.

#View your service configuration:
cat redis-master-service.yaml

#This manifest file defines a service named redis-master with a set of label selectors. These labels match the set of labels that are deployed in the previous step.

#Create the service:
kubectl create -f \
    redis-master-service.yaml

#Verify that the service has been created:
kubectl get service

#Set up Redis workers

#Although the Redis master is a single pod, you can make it more highly available to meet traffic demands by adding a few Redis worker replicas.

#View the manifest file, which defines two replicas for the Redis workers:
cat redis-slave-deployment.yaml

#Start the two replicas on your container cluster:
kubectl create -f \
    redis-slave-deployment.yaml

#Verify that the two Redis worker replicas are running by querying the list of pods:
kubectl get pods

#Create the Redis worker service

#The guestbook application needs to communicate to Redis workers to read data. To make the Redis workers discoverable, you need to set up a service. A service provides transparent load balancing to a set of pods.

#View the configuration file that defines the worker service:
cat redis-slave-service.yaml

#This file defines a service named redis-slave running on port 6379. Note that the selector field of the service matches the Redis worker pods created in the previous step.

#Create the service:
kubectl create -f \
    redis-slave-service.yaml

#Verify that the service has been created:
kubectl get service

#Set up the guestbook web front-end

#Now that you have the Redis storage of your guestbook up and running, start the guestbook web servers. Like the Redis workers, this is a replicated application managed by a deployment.

#This tutorial uses a simple PHP front-end. It is configured to talk to either the Redis worker or master services, depending on whether the request is a read or a write. It exposes a simple JSON interface and serves a user experience based on jQuery and Ajax.
Create the front-end deployment
kubectl create -f \
    frontend-deployment.yaml
#Expose the front-end on an external IP address

#The services that you created in the previous steps are only accessible within the container cluster, because the default type for a service does not expose it to the Internet.

#To make the guestbook web front-end service externally visible, you need to specify the type LoadBalancer in the service configuration.

#Use the following command to replace NodePort with LoadBalancer in the type specification in the frontend-service.yaml configuration file:
sed -i -e \
    's/NodePort/LoadBalancer/g' \
    frontend-service.yaml
#Create the service

#Create the service:
kubectl create -f \
    frontend-service.yaml

#Visit the guestbook website

#Your website is now running!
#Find your external IP address

#List the services:
kubectl get services --watch

#Wait until you see an IP address in the External IP column for the frontend service. This may take a minute. To stop monitoring the services, press Ctrl+C.
#Visit the application

#Copy the IP address from the External IP column, and load the page in your browser.